// NOTE: This is invalid protobuf, but it works with mu-haskell. It was
// originally copied from waypoint-plugin-sdk repository and modified to ensure
// that it can be used with mu-haskell. Mu-haskell does not support imports, so
// the imports were manually added here. 'google.protobuf.Empty' was left as
// mu-haskell has a special case for that. Here is a list of links to files
// which were copied:
// https://github.com/hashicorp/waypoint-plugin-sdk/blob/c3b6eb26185dc7552f8f84d486b680dec74baf5b/proto/plugin.proto
// https://github.com/protocolbuffers/protobuf/blob/d7a26435fb36b61d742c053407e3a61fb1012706/src/google/protobuf/any.proto
// https://github.com/googleapis/googleapis/blob/37ba54d7ed4da3052ceff96292631c3b6aae0e63/google/rpc/status.proto
// https://github.com/mitchellh/protostructure/blob/3cfccdb015ce0b45045430f263a85a018abd7475/protostructure.proto

syntax = "proto3";

package hashicorp.waypoint.sdk;

option go_package = ".;proto";

// import "google/protobuf/any.proto";
// import "google/protobuf/empty.proto";
// import "google/rpc/status.proto";
// import "protostructure.proto";

service Service {
  rpc getFoo1 (Foo) returns (Foo);
  // rpc getFoo2 (Foo) returns (Foo);
  // rpc getFoo3 (Foo) returns (Foo);
  // rpc getFoo4 (Foo) returns (Foo);
  // rpc getFoo5 (Foo) returns (Foo);
  // rpc getFoo6 (Foo) returns (Foo);
  // rpc getFoo7 (Foo) returns (Foo);
  // rpc getFoo8 (Foo) returns (Foo);
  // rpc getFoo9 (Foo) returns (Foo);
  rpc getBar (Bar) returns (Bar);
}

/********************************************************************
 * Generic Args
 ********************************************************************/

// Args are the common argument types that are available to many of the
// dynamic functions. The exact list of available argument types is available
// on the Go interface docs.
message Args {
  // See component.Source
  message Source {
    // app is the name of the application being deployed.
    string app = 1;

    // path is the absolute directory path to the root directory for source files.
    string path = 2;
  }

  // See component.JobInfo
  message JobInfo {
    bool local = 1;
    string workspace = 2;
    string id = 3;
  }

  // See component.DeploymentConfig
  message DeploymentConfig {
    string id = 1;
    string server_addr = 2;
    bool server_tls = 3;
    bool server_tls_skip_verify = 4;
    string entrypoint_invite_token = 5;
  }

  // DataDir represents the directory where data can be stored. This is an internal
  // struct and shouldn't be used directly. Use the relevant *datadir implementation
  // instead.
  message DataDir {
    // NOTE(mitchellh): we use specific types here rather than a single type
    // with an enum "type" field or something since this maps more cleanly
    // to our internal dependency-injection API.

    message Project {
      string cache_dir = 2;
      string data_dir = 3;
    }

    message App {
      string cache_dir = 2;
      string data_dir = 3;
    }

    message Component {
      string cache_dir = 2;
      string data_dir = 3;
    }
  }

  // Logger is used to construct an logger for the plugin.
  message Logger {
    // name is the name of the logger
    string name = 1;
  }

  // TerminalUI is used to construct the terminal.UI for the plugin.
  message TerminalUI {
    uint32 stream_id = 1;
  }

  // ReleaseTargets is the set of targets for a release operation.
  message ReleaseTargets {
    // The set of targets for a release. This is always guaranteed by
    // the caller to sum to 100%. If the release component doesn't support
    // traffic splitting, this is guaranteed to always be length 1.
    repeated Target targets = 1;

    // Target is a single target for releasing.
    message Target {
      google.protobuf.Any deployment = 1;
      uint32 percent = 2;
    }
  }

  // LabelSet is a set of labels for anything that can be labelled, such
  // as a deployment, build, etc.
  message LabelSet {
    map<string, string> labels = 1;
  }
}

// FuncSpec describes a function and is used by the dependency-injection
// framework to provide the function with the proper values.
//
// Value types are specified using strings. Built-in framework types
// are defined via constants in the `sdk` package. For custom types, you
// can use whatever string as long as it is unique. We recommend using a
// unique prefix plus the Go type name.
message FuncSpec {
  // name of the function. This is used for improved logging.
  string name = 1;

  // args is the list of arguments by protobuf Any types.
  repeated Value args = 2;

  // result are the resulting types that are made available. This is only
  // critically important to be set for functions that may chain to other
  // functions. It can be set to blank in which case it will not be used.
  repeated Value result = 3;

  message Value {
    // name is the name of the argument. This may be empty for typed arguments.
    string name = 1;

    // type is the type of the argument. All arguments must be encoded using
    // *any.Any so this type specifies the proto Any message type and not
    // a language-specific type.
    string type = 2;

    // value is the value for this Value. This is only expected to be set
    // for Args and has no impact on specs.
    google.protobuf.Any value = 3;
  }

  // Args is the standard argument type for an RPC that is calling a FuncSpec.
  message Args {
    // args is the list of arguments. This will include some of the
    // standard types in this file (in the Args message namespace) as well
    // as custom types declared by the FuncSpec that the plugin is expected
    // to understand how to decode.
    repeated Value args = 1;
  }
}

// Config is the namespace of messages related to configuration.
//
// All components that take configuration are expected to have two RPC calls:
//
//   * ConfigStruct - Returns the configuration structure.
//   * Configure - Sends the configuration data back to the plugin and the
//       plugin is also expected to perform any validation at this stage.
//   * Documentation - Returns a Documentation struct that details what configuration
//       is accepted, with documentation.
//
message Config {
  // ConfigureRequest is the request sent once the configuration decoding
  // is complete to actually assign the values to the structure.
  message ConfigureRequest {
    // json is the json data for the structure returned in the StructResp.
    // It is guaranteed to decode cleanly into the target structure.
    bytes json = 1;
  }

  // StructResp returns the struct for configuration.
  message StructResp {
    // struct is the configuration structure (or empty/nil if one doesn't exist).
    // This struct should have all the proper struct tags for HCL decoding
    // You should do validation on the Configure call.
    protostructure.Struct struct = 1;
  }

  message FieldDocumentation {
    string name = 1;
    string synopsis = 2;
    string summary = 3;
    bool optional = 4;
    string env_var = 5;
    string type = 6;
    string default = 7;
  }

  message MapperDocumentation {
    string input = 1;
    string output = 2;
    string description = 3;
  }

  message Documentation {
    string description = 1;
    string example = 2;
    string input = 3;
    string output = 4;
    map<string, FieldDocumentation> fields = 5;
    repeated MapperDocumentation mappers = 6;
  }
}

// Auth is the namespace of messages related to auth.
message Auth {
  // AuthResponse is returned by the Auth functions.
  message AuthResponse {
    bool authenticated = 1;
  }
}

// ImplementsResp returns true if the component implements an additional interface.
message ImplementsResp {
  bool implements = 1;
}

/********************************************************************
 * Terminal UI Service
 ********************************************************************/

// TerminalUIService is a service that provides "sdk/terminal.UI" interface
// to plugins. Plugins don't interact with this directly, they usually
// interact with it indirectly via a terminal.UI implementation.
service TerminalUIService {
  rpc Output(TerminalUI.OutputRequest) returns (google.protobuf.Empty);
  rpc Events(stream TerminalUI.Event) returns (stream TerminalUI.Response);
  rpc IsInteractive(google.protobuf.Empty) returns (TerminalUI.IsInteractiveResponse);
}

message TerminalUI {
  message IsInteractiveResponse {
    bool interactive = 1;
  }

  message OutputRequest {
    repeated string lines = 1;
  }

  message Response {
    oneof event {
      Event.InputResp input = 1;
    }
  }

  message Event {
    oneof event {
      Line line = 1;
      Status status = 2;
      NamedValues named_values = 3;
      Raw raw = 4;
      Table table = 5;
      StepGroup step_group = 6;
      Step step = 7;
      Input input = 8;
    }

    message Input {
      string prompt = 1;
      string style = 2;
      bool secret = 3;
    }

    message InputResp {
      string input = 1;
      google.rpc.Status error = 2;
    }

    message Status {
      string status = 1;
      string msg = 2;
      bool step = 3;
    }

    message Line {
      string msg = 1;
      string style = 2;
    }

    message Raw {
      bytes data = 1;
      bool stderr = 2;
    }

    message NamedValue {
      string name = 1;
      string value = 2;
    }

    message NamedValues {
      repeated NamedValue values = 1;
    }

    message TableEntry {
      string value = 1;
      string color = 2;
    }

    message TableRow {
      repeated TableEntry entries = 1;
    }

    message Table {
      repeated string headers = 1;
      repeated TableRow rows = 2;
    }

    message StepGroup {
      bool close = 1;
    }

    message Step {
      int32 id = 1;
      bool close = 2;
      string msg = 3;
      string status = 4;
      bytes output = 5;
    }
  }
}
/********************************************************************
 * Mapper Plugin
 ********************************************************************/

// Mapper is a specialized type of plugin that provides type mappers
// to convert to/from various types.
service Mapper {
  // ListMappers returns the list of mappers that this plugin supports.
  rpc ListMappers(google.protobuf.Empty) returns (Map.ListResponse);

  // Map executes a mapper.
  rpc Map(Map.Request) returns (Map.Response);
}

message Map {
  message Request {
    // args is the list of argument types.
    FuncSpec.Args args = 1;

    // result is the desired result type.
    string result = 2;
  }

  message Response {
    // result is the mapped data type that matches the type expected
    // by the MapRequest.result field.
    google.protobuf.Any result = 1;
  }

  message ListResponse {
    // FuncSpec
    repeated FuncSpec funcs = 1;
  }
}

/********************************************************************
 * Builder Plugin Service
 ********************************************************************/

// Builder service is a builder that takes some set of arguments and produces
// an artifact.
service Builder {
  // rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  // rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  // rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  // rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  // rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc BuildSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Build(FuncSpec.Args) returns (Build.Resp);
}

message Build {
  message Resp {
    google.protobuf.Any result = 1;
    map<string, string> labels = 2;
    bytes template_data = 3;
  }
}

/********************************************************************
 * Platform Plugin Service
 ********************************************************************/

// Platform is responsible for deploying an artifact that is in a registry.
service Platform {
  rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc DeploySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Deploy(FuncSpec.Args) returns (Deploy.Resp);

  // component.PlatformReleaser optional implementation.
  rpc DefaultReleaserSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc DefaultReleaser(FuncSpec.Args) returns (DefaultReleaser.Resp);

  // component.Destroyer optional implementation
  rpc IsDestroyer(google.protobuf.Empty) returns (ImplementsResp);
  rpc DestroySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Destroy(FuncSpec.Args) returns (google.protobuf.Empty);

  // component.WorkspaceDestroyer optional implementation
  rpc IsWorkspaceDestroyer(google.protobuf.Empty) returns (ImplementsResp);
  rpc DestroyWorkspaceSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc DestroyWorkspace(FuncSpec.Args) returns (google.protobuf.Empty);

  // IsLogPlatform returns true if this platform also implements LogPlatform.
  rpc IsLogPlatform(google.protobuf.Empty) returns (ImplementsResp);
}

message DefaultReleaser {
  message Resp {
    // stream_id is the stream ID to connect to to get access to the
    // ReleaseManager implementation.
    uint32 stream_id = 1;
  }
}

message Deploy {
  message Resp {
    // result is the resulting opaque data type
    google.protobuf.Any result = 1;

    // template data for the deployment
    bytes template_data = 2;
  }
}

/********************************************************************
 * Registry Plugin Service
 ********************************************************************/

// Registry is responsible for pushing a built artifact to some registry.
// The difference between a registry and a builder is that while a builder
// produces an artifact from source, a registry provides operations to work
// with artifacts such as listing previous, deleting, etc.
service Registry {
  rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc PushSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Push(FuncSpec.Args) returns (Push.Resp);
}

message Push {
  message Resp {
    // result is the resulting opaque data type
    google.protobuf.Any result = 1;

    // template data for the artifact
    bytes template_data = 2;
  }
}

/********************************************************************
 * Release Plugin Service
 ********************************************************************/

// ReleaseManager is a serivce that handles the process of exposing
// a deployment to traffic.
service ReleaseManager {
  rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  // component.Destroyer optional implementation
  rpc IsDestroyer(google.protobuf.Empty) returns (ImplementsResp);
  rpc DestroySpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Destroy(FuncSpec.Args) returns (google.protobuf.Empty);

  // component.WorkspaceDestroyer optional implementation
  rpc IsWorkspaceDestroyer(google.protobuf.Empty) returns (ImplementsResp);
  rpc DestroyWorkspaceSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc DestroyWorkspace(FuncSpec.Args) returns (google.protobuf.Empty);

  rpc ReleaseSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc Release(FuncSpec.Args) returns (Release.Resp);
}

message Release {
  string url = 1;

  message Resp {
    // result is the resulting data type for building.
    google.protobuf.Any result = 1;

    // release structure
    Release release = 2;

    // template data for the release
    bytes template_data = 3;
  }
}

message protostructure {

  // Struct represents a struct type.
  //
  // This has the following limitations:
  //
  //   * Circular references are not allowed between any struct types
  //   * Embedded structs are not supported
  //   * Methods are not preserved
  //
  message Struct {
    // fields is the list of fields in the struct
    repeated Field fields = 1;

    // Field is a field type. See reflect.StructField in the Go stdlib
    // since the fields in this message match that almost exactly.
    message Field {
      string Name = 1;
      string PkgPath = 2;
      string Tag = 3;
      // Type   type = 4;
    }
  }

  // Type represents a Go type.
  message Type {
    oneof type {
      Primitive primitive = 1;
      Container container = 2;
      Struct    struct = 3;

      // NOTE(mitchellh): for now, we only allow embedding a full Struct type
      // here. If there are a number of fields with the same Struct, then we'll
      // repeat ourselves a lot. If this is ever a real problem, we can introduce
      // some sort of "reference" mechanism but it wasn't necessary when this
      // was first built.
    }
  }

  // Primitive is a primitive type such as int, bool, etc.
  message Primitive {
    // kind is the reflect.Kind value for this primitive. This MUST be
    // a primitive value. For example, reflect.Ptr would be invalid here.
    uint32 kind = 1;
  }

  // Container represents any "container" type such as a sliec, array, map, etc.
  message Container {
    // kind must be one of: array, map, ptr, slice
    uint32 kind = 1;

    // elem is the type of the element of this container
    Type elem = 2;

    // key is the type of the key, only if kind == map
    Type key = 3;

    // count is the number of elements, only if kind == array
    int32 count = 4;
  }

}

message google {
  message rpc {
    // The `Status` type defines a logical error model that is suitable for
    // different programming environments, including REST APIs and RPC APIs. It is
    // used by [gRPC](https://github.com/grpc). Each `Status` message contains
    // three pieces of data: error code, error message, and error details.
    //
    // You can find out more about this error model and how to work with it in the
    // [API Design Guide](https://cloud.google.com/apis/design/errors).
    message Status {
      // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
      int32 code = 1;

      // A developer-facing error message, which should be in English. Any
      // user-facing error message should be localized and sent in the
      // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
      string message = 2;

      // A list of messages that carry the error details.  There is a common set of
      // message types for APIs to use.
      repeated google.protobuf.Any details = 3;
    }
  }
  message protobuf {
    message Any {
      // A URL/resource name that uniquely identifies the type of the serialized
      // protocol buffer message. This string must contain at least
      // one "/" character. The last segment of the URL's path must represent
      // the fully qualified name of the type (as in
      // `path/google.protobuf.Duration`). The name should be in a canonical form
      // (e.g., leading "." is not accepted).
      //
      // In practice, teams usually precompile into the binary all types that they
      // expect it to use in the context of Any. However, for URLs which use the
      // scheme `http`, `https`, or no scheme, one can optionally set up a type
      // server that maps type URLs to message definitions as follows:
      //
      // * If no scheme is provided, `https` is assumed.
      // * An HTTP GET on the URL must yield a [google.protobuf.Type][]
      //   value in binary format, or produce an error.
      // * Applications are allowed to cache lookup results based on the
      //   URL, or have them precompiled into a binary to avoid any
      //   lookup. Therefore, binary compatibility needs to be preserved
      //   on changes to types. (Use versioned type names to manage
      //   breaking changes.)
      //
      // Note: this functionality is not currently available in the official
      // protobuf release, and it is not used for type URLs beginning with
      // type.googleapis.com.
      //
      // Schemes other than `http`, `https` (or the empty scheme) might be
      // used with implementation specific semantics.
      //
      string type_url = 1;

      // Must be a valid serialized protocol buffer of the above specified type.
      bytes value = 2;
    }
  }
}